-- FUNCTION: public.get_grade_for_mark(double precision)

-- DROP FUNCTION IF EXISTS public.get_grade_for_mark(double precision);

CREATE OR REPLACE FUNCTION public.get_grade_for_mark(
	mark_value double precision)
    RETURNS TABLE(result_gpa numeric) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
BEGIN
    RETURN QUERY
    SELECT 
		gpa
    FROM public.grade
    WHERE 
        mark_value BETWEEN start AND "end"
    ORDER BY 
        CASE WHEN version = (SELECT MAX(version) FROM public.grade) 
             THEN 0 ELSE 1 END,
        version DESC
    LIMIT 1;
END;
$BODY$;

ALTER FUNCTION public.get_grade_for_mark(double precision)
    OWNER TO postgres;


-- FUNCTION: public.get_grade_from_mark(double precision)

-- DROP FUNCTION IF EXISTS public.get_grade_from_mark(double precision);

CREATE OR REPLACE FUNCTION public.get_grade_from_mark(
	mark_value double precision)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    max_version INT;
BEGIN
    SELECT MAX(version) INTO max_version FROM public.grade;
    
    RETURN (
        SELECT grade
        FROM public.grade
        WHERE mark_value BETWEEN start AND "end"
        ORDER BY 
            CASE WHEN version = max_version THEN 0 ELSE 1 END,
            version DESC
        LIMIT 1
    );
END;
$BODY$;

ALTER FUNCTION public.get_grade_from_mark(double precision)
    OWNER TO postgres;




-- View: public.exam_marks

-- DROP VIEW public.exam_marks;

CREATE OR REPLACE VIEW public.exam_marks
 AS
 SELECT cm.mid,
    cm.hid,
    cm.regno,
    cm.marks,
    r.semester,
    r.year,
    r.class,
    r.cid,
    c.code,
    c.title,
    c.theory AS theorycredits,
    c.lab AS labcredits,
    c.theory + c.lab AS totalcredits,
    get_grade_from_mark(cm.marks) AS grade,
    get_grade_for_mark(cm.marks) AS gpa
   FROM cmarks cm
     JOIN recap r ON r.rid = cm.rid
     JOIN course c ON c.cid = r.cid
  WHERE cm.hid = 246;

ALTER TABLE public.exam_marks
    OWNER TO postgres;



